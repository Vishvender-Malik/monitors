// Generated by gencpp from file pkg_ros_monitor/TargetInfo.msg
// DO NOT EDIT!


#ifndef PKG_ROS_MONITOR_MESSAGE_TARGETINFO_H
#define PKG_ROS_MONITOR_MESSAGE_TARGETINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pkg_ros_monitor/Contour.h>

namespace pkg_ros_monitor
{
template <class ContainerAllocator>
struct TargetInfo_
{
  typedef TargetInfo_<ContainerAllocator> Type;

  TargetInfo_()
    : detected(0)
    , tracking(0)
    , contour()  {
    }
  TargetInfo_(const ContainerAllocator& _alloc)
    : detected(0)
    , tracking(0)
    , contour(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _detected_type;
  _detected_type detected;

   typedef int32_t _tracking_type;
  _tracking_type tracking;

   typedef  ::pkg_ros_monitor::Contour_<ContainerAllocator>  _contour_type;
  _contour_type contour;





  typedef boost::shared_ptr< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TargetInfo_

typedef ::pkg_ros_monitor::TargetInfo_<std::allocator<void> > TargetInfo;

typedef boost::shared_ptr< ::pkg_ros_monitor::TargetInfo > TargetInfoPtr;
typedef boost::shared_ptr< ::pkg_ros_monitor::TargetInfo const> TargetInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pkg_ros_monitor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'pkg_ros_monitor': ['/home/vishvender17/monitor_ws/src/pkg_ros_monitor/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd42285afa5b7fb6f6ae10e7184156e3";
  }

  static const char* value(const ::pkg_ros_monitor::TargetInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd42285afa5b7fb6ULL;
  static const uint64_t static_value2 = 0xf6ae10e7184156e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_ros_monitor/TargetInfo";
  }

  static const char* value(const ::pkg_ros_monitor::TargetInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 detected\n\
int32 tracking\n\
Contour contour\n\
\n\
================================================================================\n\
MSG: pkg_ros_monitor/Contour\n\
geometry_msgs/Point32 center\n\
int32 width\n\
int32 height\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::pkg_ros_monitor::TargetInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected);
      stream.next(m.tracking);
      stream.next(m.contour);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_ros_monitor::TargetInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_ros_monitor::TargetInfo_<ContainerAllocator>& v)
  {
    s << indent << "detected: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detected);
    s << indent << "tracking: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracking);
    s << indent << "contour: ";
    s << std::endl;
    Printer< ::pkg_ros_monitor::Contour_<ContainerAllocator> >::stream(s, indent + "  ", v.contour);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_ROS_MONITOR_MESSAGE_TARGETINFO_H
